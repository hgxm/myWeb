package dkt.student.activity;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.apache.http.HttpStatus;
import org.json.JSONArray;
import org.json.JSONObject;
import dkt.student.MyApp;
import dkt.student.MyContants;
import dkt.student.R;
import dkt.student.database.MyHomeWorkServer;
import dkt.student.model.Homework;
import dkt.student.net.HttpApacheMapPostThread;
import dkt.student.net.HttpHandler;
import dkt.student.net.UploadHandler;
import dkt.student.net.UploadHomework;
import dkt.student.util.Md5Util;
import dkt.student.util.ViewUtil;
import dkt.student.view.DeputyView;
import dkt.student.view.HomeworkAddView;
import dkt.student.view.HorizontalListView;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.os.Message;
import android.os.Parcelable;
import android.provider.MediaStore;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.AdapterView.OnItemClickListener;

public class DoHomeWorkActivity extends Activity{

	private String actId;
	private Context context;
	
	List<HashMap<String, Object>> homeWorkList = 
		new ArrayList<HashMap<String, Object>>();
	
	private HorizontalListView homeworkListView;
	private ViewPager viewPager;
	private LinkedList<View> views = new LinkedList<View>(); // viewpage的view集合
	private HomeworkAdapter listViewAdapter;
	private String ap_id;
	private HomeworkAddView myHomeworkAddView;
	private int isTheSam = 0; // 前一页的页码
	private int isN = 0; //当前页的页码
	
	MyPopupWindow myPopupWindow;
	private String fToid = "";
	
	MyHomeWorkServer myHomeWorkServer;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		// 设置无标题
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		// 设置全屏
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);
        setContentView(R.layout.dohomework);

		initView(); // 初始化页面全局控件
        addFun();  // 组装页面点击事件
	}
	@Override
	protected void onRestart() {
		// TODO Auto-generated method stub
		super.onRestart();
		MyApp app = (MyApp) getApplication();
		app.setJiePView(findViewById(R.id.homework_back_btn));
	}
	/**
	 * 页面初始化
	 * */
	private void initView() {
		// TODO Auto-generated method stub
		context = DoHomeWorkActivity.this;
		Intent intent = this.getIntent();
		String title = intent.getStringExtra("biaoti");
		actId = intent.getStringExtra("act_id");
		ap_id = intent.getStringExtra("ap_id");
		
		MyApp app = (MyApp) getApplication();
		app.setJiePView(findViewById(R.id.homework_back_btn));
		
		String homeworkDbName = "homework" + actId + ".db";
		myHomeWorkServer = new MyHomeWorkServer(homeworkDbName);
		
		myPopupWindow = new MyPopupWindow();
		
		TextView titleTextView = (TextView) findViewById(R.id.homework_title_text);
		titleTextView.setText(title);
		
		myHomeworkAddView = new HomeworkAddView(context);
		
		viewPager = (ViewPager) findViewById(R.id.homework_view_pager);
		homeworkListView = (HorizontalListView) findViewById(R.id.homework_listview);
		
		doActivityDetailHttp();
	}
	
	/**
	 * 页面点击事件
	 * */
	private void addFun() {
		// TODO Auto-generated method stub
		// 返回
		findViewById(R.id.homework_back_btn).setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				finish();
			}
		});	
		
		// 完成提交
		findViewById(R.id.homework_submit_btn).setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				new AlertDialog.Builder(context)
				.setTitle("确定提交")
				.setMessage("确定完成提交该作业吗？")
				.setPositiveButton("确定",
				new DialogInterface.OnClickListener() {
					@Override
					public void onClick(
							DialogInterface dialog,
							int which) {
						saveMsg();
						doUploadHomework();
					}
				})
				.setNegativeButton("取消",
				new DialogInterface.OnClickListener() {
					@Override
					public void onClick(
							DialogInterface dialog,
							int which) {
						dialog.dismiss();
					}
				}).show();
			}
		});
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);
		
		if (resultCode == RESULT_OK) {
			
			// 拍照保存完成后
			if(requestCode == MyContants.RESOURCE_IMG) {
				String imgPath = getAbsoluteImagePath(data.getData());
				myPopupWindow.inserImg(getSmallBitmap(imgPath));
			}
		}
	}
	
	/**
	 * 计算图片的缩放值
	 * */
	public static int calculateInSampleSize(BitmapFactory.Options options,int reqWidth, int reqHeight) {
	    final int height = options.outHeight;
	    final int width = options.outWidth;
	    int inSampleSize = 1;

	    if (height > reqHeight || width > reqWidth) {
	             final int heightRatio = Math.round((float) height/ (float) reqHeight);
	             final int widthRatio = Math.round((float) width / (float) reqWidth);
	             inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;
	    }
	    
	    return inSampleSize;
	}
	
	/**
	 * 根据路径获得图片并压缩，返回bitmap用于显示
	 * */ 
	public static Bitmap getSmallBitmap(String filePath) {
        final BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(filePath, options);

	        // Calculate inSampleSize
	    options.inSampleSize = calculateInSampleSize(options, 700, 200);

	        // Decode bitmap with inSampleSize set
	    options.inJustDecodeBounds = false;

	    return BitmapFactory.decodeFile(filePath, options);
	}

	/**
     *  获取uri的绝对路径
     *  @param uri
	 *  @return String
     * */
    protected String getAbsoluteImagePath(Uri uri) 
    {
        
         String [] proj={MediaStore.Images.Media.DATA};
         Cursor cursor = managedQuery( uri, proj, null, null, null);                
         int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
         cursor.moveToFirst();
         return cursor.getString(column_index);
         
     }
    
	/**
	 * 活动详细
	 */
	private void doActivityDetailHttp() {
		
		showDialog(MyContants.HTTP_WAITING);
		MyApp app = (MyApp) getApplication();
		String skey = app.getSkey();
		int userId = app.getUserId();
		long time = System.currentTimeMillis();
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("method", "Activity.detail");
		map.put("args[act_id]", actId);
		map.put("args[c_id]", app.getcId());
		map.put("skey", skey);
		map.put("args[a_id]", userId);
		map.put("format", "JSON");
		map.put("ts", "" + time);
		map = Md5Util.testMD5Map(map);
		String temp = "/Api";
		new HttpApacheMapPostThread(temp, new homeworkHandler(context,
				MyContants.DO_HTTP_TEACH_ACTIVITY_DETAIL), map);
		
	}
	
	/**
	 * 学生提交作业
	 * */
	private void doUploadHomework() {
		
		showDialog(MyContants.HTTP_WAITING);
		MyApp app = (MyApp) getApplication();
		String skey = app.getSkey();
		int userId = app.getUserId();
		long time = System.currentTimeMillis();
		
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("method", "Homework.insert");
		map.put("args[h_id]", ap_id);
		try {
			map.put("args[hd_answer]", URLEncoder.encode(getAllAnswer(), "utf-8"));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		map.put("skey", skey);
		map.put("args[a_id]", userId);
		map.put("args[hd_use_time]", "");
		map.put("args[hd_persent]", "");
		map.put("format", "JSON");
		map.put("ts", "" + time);
		map = Md5Util.testMD5Map(map);
		String temp = "/Api";
		List<Homework> myHomeworks = myHomeWorkServer.searchSubjectiveForAll();
		new UploadHomework(temp, new UploadHomeworkHandler(context,
				MyContants.DO_HTTP_ISERT_PACKAGR), map, myHomeworks);
	}
	
	/**
	 * 学生获取客观题答案
	 * */
	private String getAllAnswer() {
		String myAnswer = "";
		List<Homework> mHomeworks = myHomeWorkServer.getToAnswerForAll();
		
		JSONObject jo = new JSONObject();
		try {
			if(mHomeworks.size() > 0) {
				for(int i=0;i<mHomeworks.size();i++) {
					String toid = mHomeworks.get(i).getToId();
					String answer = mHomeworks.get(i).getAnswer();
					jo.put(toid + "", answer + "");
				}
				myAnswer = jo.toString();
				System.out.println("==========myAnswer==========="+myAnswer);
			}
			
		} catch (Exception e) {
			// TODO: handle exception
		}

		return myAnswer;
	}
	
	/**
	 * 保存当前页面上的答案
	 * */
	private void saveMsg() {
		
		if(!homeWorkList.get(isN).get("to_type").toString().equals("5")) {
			String toid = homeWorkList.get(isN).get("to_id").toString();
			Homework mHomework = new Homework();
			mHomework.setToId(toid);
			mHomework.setToType(homeWorkList.get(isN).get("to_type").toString());
			LinearLayout linear = (LinearLayout) views.get(isN).findViewById(R.id.exercise_linear);
			
			HashMap<String, Object> map = myHomeworkAddView.getExerciseViewValue(
					linear, mHomework, isN);
			mHomework.setAnswer(map.get("answer").toString());
			myHomeWorkServer.updateHomework(mHomework);
		}
		if(myPopupWindow != null){
			myPopupWindow.clearPopup();
		}
	}
	
	/**
	 * 解析作业数据
	 * 
	 * */
	private void doGetClassworkDetailSucces(String result) {
		/**
		 * {"status":1,"info":{"list":
		 * {"act_id":"1","act_rel":"1,2","act_type":"1","c_id":",1,",
		 * "cro_id":"","act_is_published":"1","co_id":"1",
		 * "act_note":"\u8981\u5199\u6ce8\u91ca\u6389\u6570\u636e\u6253\u7b97\u5927\u5bb6\u5927\u52ab\u6848\u7684 \u8428\u90fd\u524c\u6536\u5230\u5361\u6b7b\u4e86\u6253\u5f00\u5c71\u4e1c\u9f99\u53e3  \u6492\u65e6\u7231\u8bf4\u6253\u7b97\u5927\u5bb6\u5b89\u8fbe\u5927\u5bb6\u6492\u65e6\u5c31\u554a\u5927\u5bb6\u554a\u89e3\u653e\u519b\u653e\u5047 \u79ef\u5206\u5361\u5c31\u51cf\u51cf\u80a5\u5c31\u5c31 \u65b9\u6cd5\u98de\u53d1\u53d1\u662ffks\u5c31fks\u5c31\u798f\u5efa\u7701\u53d1\u770b\u5065\u8eab\u623f\u770b\u624b\u673a\u8d39 \u6c34\u7535\u8d39\u5c31\u4e0a\u5c9b\u5496\u5561\u51e0\u5341\u5757\u7684\u798f\u5efa\u7701\u5feb\u9012\u8d39\u5c31\u5f00\u59cb\u53d1\u5065\u8eab\u5361\u6253\u98de\u673akdj\u653e\u6c34\u7535\u8d39\u5c31",
		 * "attachment":[],
		 * "topic":[{"to_id":"1","a_id":"2","s_id":"1",
		 * "to_title":"%26lt%3Bp%26gt%3B%E6%92%92%E6%97%A6%E6%92%92%E6%97%A6%E7%9A%84%E8%AF%AD%E6%96%87%E5%A5%BD%E4%B8%8D%EF%BC%9F%26lt%3B%2Fp%26gt%3B%26lt%3Bp%26gt%3BA%E8%A1%8C+B+%E4%B8%8D%E7%9F%A5%E9%81%93%26lt%3B%2Fp%26gt%3B",
		 * "to_type":"1","to_option":"0,1,2,3","to_answer":"[\"0\"]",
		 * "to_note":"","to_peoples":"0","to_created":"1372933157",
		 * "to_updated":"0","to_deleted":"0",
		 * "path":"http:\/\/192.168.7.53:81\/GenerationTopic\/Image\/1.png"}
		 * */
		
		try {
			
			JSONObject jsonObject = new JSONObject(result);
			String status = jsonObject.get("status").toString();
			if(status.equals("0")) {
				ViewUtil.myToast(context, "无作业数据");
				return;
			}
			String courseListString = jsonObject.get("info").toString();
			JSONObject jsonObject1 = new JSONObject(courseListString);
			JSONObject jsonObject2 = new JSONObject(jsonObject1.get("list").toString());
			JSONArray jesonArry = new JSONArray(jsonObject2.getString("topic").toString());
			int count = jesonArry.length();
//			System.out.println("==================="+count);
			
			for (int i = 0; i < count; i++) {
				JSONObject object = jesonArry.getJSONObject(i);
				HashMap<String, Object> map = new HashMap<String, Object>();
				map.put("to_type", object.get("to_type").toString());
				map.put("to_id", object.get("to_id").toString());
				map.put("to_title", object.get("to_title").toString());
				map.put("to_option", object.get("to_option").toString());
				map.put("path", object.get("path").toString());
				map.put("to_answer", object.get("to_answer").toString());
				homeWorkList.add(map);
				if(!object.get("to_type").toString().equals("5") && myHomeWorkServer.getToAnswerForId(object.get("to_id").toString()) == null) {
					Homework mHomework = new Homework();
					mHomework.setToId(object.get("to_id").toString());
					mHomework.setActId(jsonObject2.getString("act_id").toString());
					mHomework.setToType(object.get("to_type").toString());
					mHomework.setToPath(object.get("path").toString());
					mHomework.setToBitmap(null);
					mHomework.setAnswer("-1");
					mHomework.setToAnswer(object.get("to_answer").toString());
					myHomeWorkServer.insertHomework(mHomework);
				}
			}
			
			addHomeworkListView();
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	/**
	 * 解析提交的返回数据
	 * */
	private void doUploadSucess(String result) {
		try {
			JSONObject jsonObject = new JSONObject(result);
			String status = jsonObject.get("status").toString();
			if(status.equals("0")) {
				String errString = jsonObject.get("message").toString();
			
				ViewUtil.myToast(context, errString);
			}else if(status.equals("1")){
				ViewUtil.myToast(context, "提交成功");
			}
			finish();
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	class UploadHomeworkHandler extends UploadHandler {
		String tag;

		public UploadHomeworkHandler(Context context, String tag) {
			super(context, tag);
			// TODO Auto-generated constructor stub
			this.tag = tag;
			
		}

		@Override
		public void handleMessage(Message msg) {
			// TODO Auto-generated method stub
			super.handleMessage(msg);
			// popupWindowPackageView
			dismissDialog(MyContants.HTTP_WAITING);
			if (msg.what == HttpStatus.SC_OK) {
				System.out.println("______返回值开始_____________");
				System.out.println(msg.obj);
				System.out.println("________返回值结束____________");
				doUploadSucess((String) msg.obj);
			}
		}

	}
	
	class homeworkHandler extends HttpHandler {
		
		String tag;
		
		public homeworkHandler(Context context, String tag) {
			super(context, tag);
			// TODO Auto-generated constructor stub
			this.tag = tag;
		}
		
		@Override
		public void handleMessage(Message msg) {
			// TODO Auto-generated method stub
			super.handleMessage(msg);
			dismissDialog(MyContants.HTTP_WAITING);
			if (msg.what == HttpStatus.SC_OK) {
				System.out.println("______返回值开始_____________");
				System.out.println(msg.obj);
				System.out.println("________返回值结束____________");
				if(tag.equals(MyContants.DO_HTTP_TEACH_ACTIVITY_DETAIL)){
					doGetClassworkDetailSucces((String) msg.obj);
				}
			}
		}
	}

	private void addHomeworkListView() {
		listViewAdapter = new HomeworkAdapter(context, homeWorkList, 0, 0);
		homeworkListView.setAdapter(listViewAdapter);
		
		homeworkListView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				// TODO Auto-generated method stub
				
				// 如果点击的是已经选中的则不操作
				if(isTheSam == arg2) {
					
				}else {
					
					viewPager.setCurrentItem(arg2);
//					listViewAdapter.refresh(homeWorkList, arg2);
//					isTheSam = arg2;
				}
				
			}
		});
		
		for(int i=0;i<homeWorkList.size();i++) {
			
			View view = getLayoutInflater().inflate(R.layout.homework_item, null);
			
			LinearLayout linearTemp = (LinearLayout) view.findViewById(R.id.exercise_linear);
			
			Homework myHomework = new Homework();
			Homework mHomework = new Homework();
			
			myHomework.setToId(homeWorkList.get(i).get("to_id").toString());
			myHomework.setToOption(homeWorkList.get(i).get("to_option").toString());
			myHomework.setToTitle(homeWorkList.get(i).get("to_title").toString());
			myHomework.setToPath(homeWorkList.get(i).get("path").toString());
			myHomework.setToType(homeWorkList.get(i).get("to_type").toString());
			
			mHomework = myHomeWorkServer.getToAnswerForId(homeWorkList.get(i).get("to_id").toString());
			
			if(null != mHomework && !mHomework.getAnswer().equals("-1")) {
				myHomework.setAnswer(mHomework.getAnswer());
				myHomeworkAddView.addExerciseView(linearTemp, myHomework);
				myHomeworkAddView.setExerciseViewValue(linearTemp, myHomework, 1);
			}else{
				myHomeworkAddView.addExerciseView(linearTemp, myHomework);
			}
			views.add(view);
		}
			
		viewPager.setAdapter(new MyAdapter(homeWorkList));
		viewPager.setOnPageChangeListener(new MyPageChangeListener());
	}
	
	private class MyAdapter extends PagerAdapter {
		
		List<HashMap<String, Object>> list;
		public MyAdapter(List<HashMap<String, Object>> list) {
			this.list = list;
		}
		
		@Override
		public int getCount() {
			return list.size();
		}

		@Override
		public Object instantiateItem(View arg0, int arg1) {
			((ViewPager) arg0).addView(views.get(arg1),0);
			return views.get(arg1);
		}

		@Override
		public void destroyItem(View arg0, int arg1, Object arg2) {
			View view = (View)arg2;
		     ((ViewPager) arg0).removeView(view);
		     view =null;
		}

		@Override
		public boolean isViewFromObject(View arg0, Object arg1) {
			return arg0 == arg1;
		}

		@Override
		public void restoreState(Parcelable arg0, ClassLoader arg1) {

		}

		@Override
		public Parcelable saveState() {
			return null;
		}

		@Override
		public void startUpdate(View arg0) {

		}

		@Override
		public void finishUpdate(View arg0) {

		}
	}
	
	private class MyPageChangeListener implements OnPageChangeListener {

		public void onPageSelected(int position) {
//			System.out.println("=======position========="+position);
//			if(homeWorkList.get(isTheSam).get("to_type").toString().equals("5")) {
//				System.out.println("======bbbb===="+homeWorkList.get(isTheSam).get("to_type").toString());
//
//				String toid = homeWorkList.get(isTheSam).get("to_id").toString();
//				Homework mHomework = new Homework();
//				mHomework.setSubId(subId);
//				mHomework.setToId(toid);
//				mHomework.setToAnswerBitmap(myDeputyView.getBitmapForByte());
//				myHomeWorkServer.updateSubjective(mHomework);
//			}
			isN = position;
			if(!homeWorkList.get(isTheSam).get("to_type").toString().equals("5")) {
				String toid = homeWorkList.get(isTheSam).get("to_id").toString();
				Homework mHomework = new Homework();
				mHomework.setToId(toid);
				mHomework.setToType(homeWorkList.get(isTheSam).get("to_type").toString());
				LinearLayout linear = (LinearLayout) views.get(isTheSam).findViewById(R.id.exercise_linear);
				
				HashMap<String, Object> map = myHomeworkAddView.getExerciseViewValue(
						linear, mHomework, position);
				mHomework.setAnswer(map.get("answer").toString());
				myHomeWorkServer.updateHomework(mHomework);
			}
			if(myPopupWindow != null){
				myPopupWindow.clearPopup();
			}
			listViewAdapter.refresh(homeWorkList, position); // 在这里通过position获取views里面的view  再通过view获取view中的答案
			isTheSam = position;
		}

		public void onPageScrollStateChanged(int arg0) {
			
		}

		public void onPageScrolled(int arg0, float arg1, int arg2) {
			
		}
	}
	
	class HomeworkAdapter extends BaseAdapter {
		List<HashMap<String, Object>> list;
		Context context;
		int tag;
		Holder holder;
		int i;
		
		public HomeworkAdapter(Context context,
				List<HashMap<String, Object>> list, int tag, int i) {
			this.list = list;
			this.context = context;
			this.tag = tag;
			this.i = i;
		}

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return list.size();
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return 0;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub
			View view = null;
			if(0 == tag) {
				view = addHomeworkView(position, convertView, parent);
			}
			
			return view;
		}
		
		// 刷新适配器
		public void refresh(List<HashMap<String, Object>> list, int i) {
			this.list = list;
			this.i = i;
			this.notifyDataSetChanged();
		}
		
		// 生成课程列表视图
		private View addHomeworkView(int position, View convertView,
				ViewGroup parent) {
			if (convertView == null) {//     android:background="@drawable/yuwen"
				holder = new Holder();
				convertView = LayoutInflater.from(context).inflate(
						R.layout.homework_listview_item, null);
				holder.homeworkName = (TextView) convertView
						.findViewById(R.id.homework_text);
				holder.homeworkRela = (RelativeLayout) convertView
						.findViewById(R.id.homework_change_re);	
				convertView.setTag(holder);

			} else {
				holder = (Holder) convertView.getTag();
			}
			String homeworkNameString = (position+1)+"、";
			String homeworkType = list.get(position).get("to_type").toString();
			if(homeworkType.equals("1")) {
				homeworkNameString = homeworkNameString + "单选";
			}else if(homeworkType.equals("2")) {
				homeworkNameString = homeworkNameString + "多选";
			}else if(homeworkType.equals("3")) {
				homeworkNameString = homeworkNameString + "填空";
			}else if(homeworkType.equals("4")) {
				homeworkNameString = homeworkNameString + "判断";
			}else if(homeworkType.equals("5")) {
				homeworkNameString = homeworkNameString + "简答";
			}
			
			holder.homeworkName.setText(homeworkNameString);
//			holder.homeworkRela.set
			if(position == i) {
				RelativeLayout.LayoutParams reP = (RelativeLayout.LayoutParams)
					holder.homeworkRela.getLayoutParams();
				reP.height = 100;
				reP.width = 100;
				holder.homeworkRela.setLayoutParams(reP);
				
				// 题目类型为5 且  不是同一个题目
				if(homeworkType.equals("5") && !list.get(position).get("to_id").toString().equals(fToid)) {
					
					myPopupWindow.showPopup(convertView, list.get(position).get("to_id").toString());
					
				}else{
					if(myPopupWindow != null){
						myPopupWindow.clearPopup();
					}
				}
				fToid = list.get(position).get("to_id").toString();
			}
			return convertView;

		}
		
		class Holder {
			TextView homeworkName, classHourName, lessonName;
			ImageView courseImg;
			RelativeLayout homeworkRela;
		}

	}
	
	
	
	class MyPopupWindow{
		PopupWindow popup;
		private DeputyView myDeputyView;
		View v;
		int currentX;
		int currentY;
		private int pageNum = 0;
		private int pageNums = 0;
		private String toids;
		private String subId;
		View view;
		
		public MyPopupWindow() {
			
		}
		
		public void clearPopup() {
			if (popup != null && popup.isShowing()) {
				updateSubPage();
				popup.dismiss();
				popup = null; 
			}
		}
		
		public void showPopup(View v, String toid) {
			this.toids = toid;
			
			view = LayoutInflater.from(context).inflate(R.layout.popup_icon,
					null);
			RelativeLayout iv_icon = (RelativeLayout) view
					.findViewById(R.id.move_re);
			myDeputyView = (DeputyView) view.findViewById(R.id.homework_deputyview);
			popup = new PopupWindow(view, 914, 514);
			
			pageNum = 0;
			pageNums = myHomeWorkServer.searchSubjectiveForNum(toid);
			if(0 == pageNums) {
				creatNewSubAnswer(toid);
				pageNums = 1;
			}
			loadSubPage(toid);
			
			currentX = view.getWidth();
			currentY =  view.getHeight();
			// 完成关闭
			view.findViewById(R.id.move_popu_close).setOnClickListener(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					clearPopup();
				}
			});
			// 相机
			view.findViewById(R.id.homework_camera).setOnClickListener(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					Intent intent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
					startActivityForResult(intent, MyContants.RESOURCE_IMG);
				}
			});
			view.findViewById(R.id.note_book_pre_page).setOnClickListener(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					updateSubPage();
					if(pageNum == 0){
						
					}else{
						myDeputyView.clear();
						pageNum = pageNum - 1;
						loadSubPage(toids);
					}
				}
			});
			view.findViewById(R.id.note_book_next_page).setOnClickListener(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					updateSubPage();
					pageNum = pageNum + 1;
					myDeputyView.clear();
					if(pageNum == pageNums) {
						creatNewSubAnswer(toids);
						pageNums = pageNums + 1;
					}
					loadSubPage(toids);
				}
			});
			
			
			iv_icon.setOnTouchListener(new OnTouchListener() { 

				private int lastX, lastY;
				
				@Override
				public boolean onTouch(View v, MotionEvent event) {
					// TODO Auto-generated method stub
					switch (event.getAction()) {
					case MotionEvent.ACTION_DOWN:

						lastX = (int)event.getRawX();
	                    lastY = (int)event.getRawY();
						break;
					case MotionEvent.ACTION_MOVE:
						
						int dx = (int)event.getRawX() - lastX;
						int dy = (int)event.getRawY() - lastY;
						
						currentX += dx;
						currentY += dy;
						popup.update(currentX, currentY, -1, -1);
						lastX = (int) event.getRawX();
			            lastY = (int) event.getRawY();					
						break;
					case MotionEvent.ACTION_UP:
						lastX = 0;
	                    lastY = 0;
						break;
					}
					return true;
				}
			});
			
			popup.showAtLocation(v, Gravity.CENTER, 0, 0);
			popup.update();
		}
		
		public void inserImg(Bitmap bitmap) {
			if(null != bitmap) {
				myDeputyView.clear();
				myDeputyView.insertImg(bitmap);
			}
		}
		/**
		 * 创建主观题答案的新页
		 * */
		private void creatNewSubAnswer(String toid) {
			Homework mHomework = new Homework();
			mHomework.setToId(toid);
			mHomework.setToAnswerBitmap(null);
			myHomeWorkServer.insertSubjective(mHomework);
		}
		
		/**
		 * 载入指定页面的主观题答案
		 * */
		private void loadSubPage(String toid) {
			Homework mHomework = new Homework();
			mHomework = myHomeWorkServer.searchSubjectiveForPage(toid, pageNum);
			if(null != mHomework.getToAnswerBitmap()) {
				myDeputyView.insertImg(Bytes2Bimap(mHomework.getToAnswerBitmap()));
			}
			subId = mHomework.getSubId();
			setPageNum();
		}
		
		/**
		 * 更新指定的主观题答案
		 * */
		private void updateSubPage() {

			Homework mHomework = new Homework();
			mHomework.setSubId(subId);
			mHomework.setToId(toids);
			mHomework.setToAnswerBitmap(myDeputyView.getBitmapForByte());
			myHomeWorkServer.updateSubjective(mHomework);
			
		}
		
		/**
		 * 页码设置
		 * */
		private void setPageNum() {
			TextView mTextView = (TextView) view.findViewById(R.id.note_book_page_txt);
			String mtext = "第" + (pageNum+1) +"/" + pageNums + "页";
			mTextView.setText(mtext);
		}
		
		/**
		 * 二进制转图片
		 * */
		private Bitmap Bytes2Bimap(byte[] b){
		    if(b.length!=0){
		    	return BitmapFactory.decodeByteArray(b, 0, b.length);
		    }
		    else {
		    	return null;
		    }
		}
	}	
	
	
	
	/**
	 * 等待框
	 */
	protected Dialog onCreateDialog(int id) {
		ProgressDialog dialog = null;
		switch (id) {
		case MyContants.HTTP_WAITING:
			dialog = new ProgressDialog(this);
			dialog.setMessage("系统正在加载，请稍等....");
			break;
		}

		return dialog;
	}
}
