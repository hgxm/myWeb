//
//  SmoothLineView.m
//  Smooth Line View
//
//  Created by Levi Nunnink on 8/15/11.
//  Copyright 2011 culturezoo. All rights reserved.
//

#import "SmoothLineView.h"
#import <QuartzCore/QuartzCore.h>

#define DEFAULT_COLOR [UIColor blackColor]
#define DEFAULT_WIDTH 2.0f

@interface SmoothLineView () 

#pragma mark Private Helper function

CGPoint midPoint(CGPoint p1, CGPoint p2);

@end

@implementation SmoothLineView
@synthesize isNeedDraw;
@synthesize SmoothLineViewDelegate;
#pragma mark -

-(void)setup
{
     
    self.lineWidth = DEFAULT_WIDTH;
    self.lineColor = DEFAULT_COLOR;
}

-(void)addLayer:(UIImage *)image{
    
    count=0;
    myImage=[image retain];

    
}
- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        self.backgroundColor = [UIColor clearColor];
        [self setup];
    }
    return self;
}

-(id)initWithCoder:(NSCoder *)aDecoder
{
    self = [super initWithCoder:aDecoder];
    if (self) {
        [self setup];
    }
    return self;
}

#pragma mark Private Helper function

CGPoint midPoint(CGPoint p1, CGPoint p2)
{
    return CGPointMake((p1.x + p2.x) * 0.5, (p1.y + p2.y) * 0.5);
}


-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
    
    UITouch *touch = [touches anyObject];
    
    previousPoint1 = [touch previousLocationInView:self];
    previousPoint2 = [touch previousLocationInView:self];
    currentPoint = [touch locationInView:self];
    
    
    //如果点击一下屏幕也需要绘图的时候打开注释
    //[self touchesMoved:touches withEvent:event];
    
    
    
    [SmoothLineViewDelegate performSelector:@selector(clickScreen)];

}

-(void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
    
    if (isNeedDraw==YES) {
        UITouch *touch  = [touches anyObject];
        
        previousPoint2  = previousPoint1;
        previousPoint1  = [touch previousLocationInView:self];
        currentPoint    = [touch locationInView:self];
        
        
        
        // calculate mid point
        CGPoint mid1    = midPoint(previousPoint1, previousPoint2);
        CGPoint mid2    = midPoint(currentPoint, previousPoint1);
        
        CGMutablePathRef path = CGPathCreateMutable();
        CGPathMoveToPoint(path, NULL, mid1.x, mid1.y);
        CGPathAddQuadCurveToPoint(path, NULL, previousPoint1.x, previousPoint1.y, mid2.x, mid2.y);
        CGRect bounds = CGPathGetBoundingBox(path);
        CGPathRelease(path);
        
        CGRect drawBox = bounds;
        
        //Pad our values so the bounding box respects our line width
        drawBox.origin.x        -= self.lineWidth * 2;
        drawBox.origin.y        -= self.lineWidth * 2;
        drawBox.size.width      += self.lineWidth * 4;
        drawBox.size.height     += self.lineWidth * 4;
        
        UIGraphicsBeginImageContext(drawBox.size);
        [self.layer renderInContext:UIGraphicsGetCurrentContext()];
        UIGraphicsEndImageContext();
        
        [self setNeedsDisplayInRect:drawBox];
    }
   
    
    
  
}

- (void)drawRect:(CGRect)rect
{
    

    if (count==0) {
        
        [myImage drawInRect:self.bounds];
        [myImage release];
        count=1;
        
        //NSLog(@"only one");
    }
    
    if (previousPoint1.x==0&&previousPoint1.y==0) {
        
    }else{
        if (isNeedDraw==YES) {
            
            CGPoint mid1 = midPoint(previousPoint1, previousPoint2);
            CGPoint mid2 = midPoint(currentPoint, previousPoint1);
            
            CGContextRef context = UIGraphicsGetCurrentContext();
            [self.layer renderInContext:context];
            
            CGContextMoveToPoint(context, mid1.x, mid1.y);
            CGContextAddQuadCurveToPoint(context, previousPoint1.x, previousPoint1.y, mid2.x, mid2.y);
            CGContextSetLineCap(context, kCGLineCapRound);
            CGContextSetLineWidth(context, self.lineWidth);
            CGContextSetStrokeColorWithColor(context, self.lineColor.CGColor);
            CGContextSetBlendMode(context, kCGBlendModeCopy);
            
            CGContextStrokePath(context);
        }
       
    }
    
    
    
}

- (void)dealloc
{
    self.lineColor = nil;
    [super dealloc];
}

@synthesize lineColor,lineWidth;
@end


