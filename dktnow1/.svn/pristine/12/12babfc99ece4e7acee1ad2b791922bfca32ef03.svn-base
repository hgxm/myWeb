//
//  HomeViewController.m
//  ClassRoomTeacher
//
//  Created by apple  on 13-6-3.
//  Copyright (c) 2013年 apple . All rights reserved.
//

#import "HomeViewController.h"

@interface HomeViewController ()

@end

@implementation HomeViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

-(void)viewControllerPop{
    
    [self.navigationController popViewControllerAnimated:YES];
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    self.view.backgroundColor = [UIColor whiteColor];
    
    
    
   
    
    /*暂时去掉菜单
    menu = [[MenuView alloc]initWithFrame:CGRectMake(0, 53, 93, 695)];
    menu.mdele = self;
    [self.view addSubview:menu];
    [menu release];
     */
    
   [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(viewControllerPop) name:@"viewControllerPop" object:nil];
    
    
    
   // [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(changeNavFrame:) name:@"changeNavFrame" object:nil];
    //去掉拖拉效果，菜单栏默认一直显示
    /*
    moveMenuView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 748/2-50/2, 30, 50)];
    moveMenuView.userInteractionEnabled = YES;
    moveMenuView.backgroundColor = [UIColor redColor];
    [self.view addSubview:moveMenuView];
    [moveMenuView release];
    
    
    UIPanGestureRecognizer *panGestureCaogao = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(panPieceCaogao:)];
    [panGestureCaogao setMaximumNumberOfTouches:2];
    [moveMenuView addGestureRecognizer:panGestureCaogao];
    [panGestureCaogao release];
     
     */
    
    
    KechengViewController *kechengVc = [[KechengViewController alloc]init];
    navKecheng = [[UINavigationController alloc]initWithRootViewController:kechengVc];
    navKecheng.view.frame = CGRectMake(0, 0, 748, 1024);
    [navKecheng setNavigationBarHidden:YES];
    [self.view addSubview:navKecheng.view];
    [kechengVc release];
    
    //[self clickMenu:10];
	// Do any additional setup after loading the view.
}

/*
-(void)changeNavFrame:(NSNotification *)aNote{
    
    NSString *strObj = [aNote object];
    
    if ([strObj intValue]==1) {

        navKecheng.view.frame = CGRectMake(0, 0, 1024, 748);
    }else{
        

        
        navKecheng.view.frame = CGRectMake(93, 53, 1024-93, 748-53);

    }
   

}*/
/*
-(void)panPieceCaogao:(UIPanGestureRecognizer *)gestureRecognizer{
    
    UIView *piece = [gestureRecognizer view];
	if ([gestureRecognizer state] == UIGestureRecognizerStateBegan || [gestureRecognizer state] == UIGestureRecognizerStateChanged) {
        
        
		CGPoint translation = [gestureRecognizer translationInView:[piece superview]];
        [piece setCenter:CGPointMake([piece center].x + translation.x, [piece center].y)];
        
        CGRect rect=piece.frame;
        if (rect.origin.y<=0) {
            rect.origin.y=0;
        }
        if (rect.origin.x<=0) {
            rect.origin.x=0;
        }
        if (rect.origin.x>=100) {
            rect.origin.x=100;
        }
        piece.frame=rect;
        
        menu.frame = CGRectMake(rect.origin.x-100, menu.frame.origin.y, menu.frame.size.width, menu.frame.size.height);
        
		[gestureRecognizer setTranslation:CGPointZero inView:[piece superview]];
	}else if([gestureRecognizer state] == UIGestureRecognizerStateEnded){
    
        if (piece.frame.origin.x<50) {
            [UIView animateWithDuration:0.2 animations:^(void){
            
                menu.frame = CGRectMake(-100, 0, 100, 748);
                moveMenuView.frame = CGRectMake(0, 748/2-50/2, 30, 50);
                
            }];
        }else{
            
            [UIView animateWithDuration:0.2 animations:^(void){
                
                menu.frame = CGRectMake(0, 0, 100, 748);
                moveMenuView.frame = CGRectMake(100, 748/2-50/2, 30, 50);
                
            }];

        }
    }
}
*/
-(void)clickMenu:(int)tag{
    
    /*
    if (tag==10) {
        
        if (navRicheng==nil) {
            RichengViewController *richengVc = [[RichengViewController alloc]init];
            navRicheng = [[UINavigationController alloc]initWithRootViewController:richengVc];
            navRicheng.view.frame = CGRectMake(93, 53, 748-93, 1024-53);
            [navRicheng setNavigationBarHidden:YES];
            [self.view addSubview:navRicheng.view];
            [richengVc release];
        }
        
            navRicheng.view.hidden = NO;
            navKecheng.view.hidden = YES;
        
        
        
        

    }else if(tag==12) {
        if (navKecheng==nil) {
            
            
            KechengViewController *kechengVc = [[KechengViewController alloc]init];
            navKecheng = [[UINavigationController alloc]initWithRootViewController:kechengVc];
            navKecheng.view.frame = CGRectMake(93, 53, 1024-93, 748-53);
            [navKecheng setNavigationBarHidden:YES];
            [self.view addSubview:navKecheng.view];
            [kechengVc release];
        }
        navKecheng.view.hidden = NO;
        navRicheng.view.hidden = YES;
        

    }
     */
    NSLog(@"tag is %d",tag);
    
}

#if __IPHONE_OS_VERSION_MAX_ALLOWED >= __IPHONE_6_0

-(NSUInteger)supportedInterfaceOrientations
{
    return UIInterfaceOrientationMaskLandscape;
}

- (BOOL)shouldAutorotate {
    return YES;
}

#endif



// Override to allow orientations other than the default portrait orientation.
- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    // Return YES for supported orientations
    return (interfaceOrientation == UIInterfaceOrientationLandscapeLeft  ||
            interfaceOrientation == UIInterfaceOrientationLandscapeRight);
    
}
-(void)dealloc{
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:@"viewControllerPop" object:nil];

    [super dealloc];
}
- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end
