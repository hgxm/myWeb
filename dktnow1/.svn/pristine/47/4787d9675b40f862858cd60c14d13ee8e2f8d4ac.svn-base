/*
 * ACEDrawingView: https://github.com/acerbetti/ACEDrawingView
 *
 * Copyright (c) 2013 Stefano Acerbetti
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

#import "ACEDrawingView.h"
#import "ACEDrawingTools.h"

#import <QuartzCore/QuartzCore.h>

#define kDefaultLineColor       [UIColor blueColor]
#define kDefaultLineWidth       5.0f;
#define kDefaultLineAlpha       1.0f

// experimental code
#define PARTIAL_REDRAW          0

@interface ACEDrawingView ()
@property (nonatomic, strong) NSMutableArray *pathArray;
@property (nonatomic, strong) NSMutableArray *bufferArray;
@property (nonatomic, strong) id<ACEDrawingTool> currentTool;
@property (nonatomic, strong) UIImage *image;
@end

#pragma mark -

@implementation ACEDrawingView

- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self configure];
    }
    return self;
}

- (id)initWithCoder:(NSCoder *)aDecoder
{
    self = [super initWithCoder:aDecoder];
    if (self) {
        [self configure];
    }
    return self;
}
-(void)touchScreen:(NSNotification*)aNote{
    
    
    
    NSMutableDictionary *muDict=[[aNote object] mutableCopy];
    
    CGPoint previousPoint1=CGPointFromString([muDict objectForKey:@"point1"]);
    
    // init the bezier path
    self.currentTool = [self toolWithCurrentSettings];
    self.currentTool.lineWidth = self.lineWidth;
    self.currentTool.lineColor = self.lineColor;
    self.currentTool.lineAlpha = self.lineAlpha;
    [self.pathArray addObject:self.currentTool];
    
    // add the first touch
    
    [self.currentTool setInitialPoint:previousPoint1];
    
    // call the delegate
    if ([self.delegate respondsToSelector:@selector(drawingView:willBeginDrawUsingTool:)]) {
        [self.delegate drawingView:self willBeginDrawUsingTool:self.currentTool];
    }
    
    
}
-(void)moveScreen:(NSNotification*)aNote{
    
    NSMutableDictionary *muDict=[[aNote object] mutableCopy];
    
    CGPoint previousPoint1=CGPointFromString([muDict objectForKey:@"point1"]);
    CGPoint previousPoint2=CGPointFromString([muDict objectForKey:@"point2"]);
    
    [self.currentTool moveFromPoint:previousPoint1 toPoint:previousPoint2];
    
#if PARTIAL_REDRAW
    // calculate the dirty rect
    CGFloat minX = fmin(previousLocation.x, currentLocation.x) - self.lineWidth * 0.5;
    CGFloat minY = fmin(previousLocation.y, currentLocation.y) - self.lineWidth * 0.5;
    CGFloat maxX = fmax(previousLocation.x, currentLocation.x) + self.lineWidth * 0.5;
    CGFloat maxY = fmax(previousLocation.y, currentLocation.y) + self.lineWidth * 0.5;
    [self setNeedsDisplayInRect:CGRectMake(minX, minY, (maxX - minX), (maxY - minY))];
#else
    [self setNeedsDisplay];
#endif
    
    
}
-(void)endScreen:(NSNotification*)aNote{
    
    // update the image
    [self updateCacheImage:NO];
    
    // clear the current tool
    self.currentTool = nil;
    
    // clear the redo queue
    [self.bufferArray removeAllObjects];
    
    // call the delegate
    if ([self.delegate respondsToSelector:@selector(drawingView:didEndDrawUsingTool:)]) {
        [self.delegate drawingView:self didEndDrawUsingTool:self.currentTool];
    }
    
}
- (void)configure
{
    
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(touchScreen:) name:@"touchScreen" object:nil];
    
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(moveScreen:) name:@"moveScreen" object:nil];
    
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(endScreen:) name:@"endScreen" object:nil];
    
    

    
//    queue=[[NSOperationQueue alloc]init];
//    [queue setMaxConcurrentOperationCount:1];
//    
    // init the private arrays
    self.pathArray = [NSMutableArray array];
    self.bufferArray = [NSMutableArray array];
    
    // set the default values for the public properties
    self.lineColor = kDefaultLineColor;
    self.lineWidth = kDefaultLineWidth;
    self.lineAlpha = kDefaultLineAlpha;
    
    // set the transparent background
    self.backgroundColor = [UIColor clearColor];
}


#pragma mark - Drawing

- (void)drawRect:(CGRect)rect
{

    [self.image drawInRect:self.bounds];
    [self.currentTool draw];
}

- (void)updateCacheImage:(BOOL)redraw
{
    // init a context
    UIGraphicsBeginImageContextWithOptions(self.bounds.size, NO, 0.0);
    
    if (redraw) {
        // erase the previous image
        self.image = nil;
        
        // I need to redraw all the lines
        for (id<ACEDrawingTool> tool in self.pathArray) {
            [tool draw];
        }
        
    } else {
        // set the draw point
        [self.image drawAtPoint:CGPointZero];
        [self.currentTool draw];
    }
    
    // store the image
    self.image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
}

- (id<ACEDrawingTool>)toolWithCurrentSettings
{
    return [[[ACEDrawingPenTool alloc] init] autorelease];

}


#pragma mark - Touch Methods
/*
-(void)doWork:(NSString *)strBody{
    
    NSString *strUser=[[NSUserDefaults standardUserDefaults] objectForKey:@"textUserName"];
    NSString *strPass=[[NSUserDefaults standardUserDefaults] objectForKey:@"textPassword"];
   

    NSString *contentLength=[NSString stringWithFormat:@"%d",[strBody length]];
    
    NSString *strReceiver=[[NSUserDefaults standardUserDefaults]objectForKey:@"muStr"];
    
    NSMutableDictionary *mudict=[ToolClass getSocektHeadDict:strUser pass:strPass auth_type:@"2" auth_version:IOS_VERSION contentLength:contentLength contentype:@"" receiver:strReceiver];
    
    NSString *strHead=[ToolClass getSocketHead:mudict];
    
    NSString *reqestString=[NSString stringWithFormat:@"%@%@",strHead,strBody];
    
    [[Stream sharedStream] requestData:reqestString whoRequest:nil condition:0];
    
    [mudict release];
    [strHead release];
}*/
- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
    // init the bezier path
    self.currentTool = [self toolWithCurrentSettings];
    self.currentTool.lineWidth = self.lineWidth;
    self.currentTool.lineColor = self.lineColor;
    self.currentTool.lineAlpha = self.lineAlpha;
    [self.pathArray addObject:self.currentTool];
    
    // add the first touch
    UITouch *touch = [touches anyObject];
    [self.currentTool setInitialPoint:[touch locationInView:self]];
    
    // call the delegate
    if ([self.delegate respondsToSelector:@selector(drawingView:willBeginDrawUsingTool:)]) {
        [self.delegate drawingView:self willBeginDrawUsingTool:self.currentTool];
    }
    //老师不再给学生发送画笔点的请求
    /*
    NSString *strBody=[NSString stringWithFormat:@"{\"type\":\"1\",\"content\":{\"point1\":\"%@\",\"point2\":\"%@\",\"point3\":\"%@\"}}",NSStringFromCGPoint([touch locationInView:self]),NSStringFromCGPoint(CGPointZero),[ToolClass getCurretDate]];
    
    NSInvocationOperation *operation = [[NSInvocationOperation alloc]initWithTarget:self selector:@selector(doWork:) object:strBody];
    [queue addOperation:operation];
    [operation release];
    */
   
}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
    // save all the touches in the path
    UITouch *touch = [touches anyObject];
    
    // add the current point to the path
    CGPoint currentLocation = [touch locationInView:self];
    CGPoint previousLocation = [touch previousLocationInView:self];
    [self.currentTool moveFromPoint:previousLocation toPoint:currentLocation];
    
#if PARTIAL_REDRAW
    // calculate the dirty rect
    CGFloat minX = fmin(previousLocation.x, currentLocation.x) - self.lineWidth * 0.5;
    CGFloat minY = fmin(previousLocation.y, currentLocation.y) - self.lineWidth * 0.5;
    CGFloat maxX = fmax(previousLocation.x, currentLocation.x) + self.lineWidth * 0.5;
    CGFloat maxY = fmax(previousLocation.y, currentLocation.y) + self.lineWidth * 0.5;
    [self setNeedsDisplayInRect:CGRectMake(minX, minY, (maxX - minX), (maxY - minY))];
#else
    [self setNeedsDisplay];
#endif
    
    /*
    NSString *strBody=[NSString stringWithFormat:@"{\"type\":\"2\",\"content\":{\"point1\":\"%@\",\"point2\":\"%@\",\"point3\":\"%@\"}}",NSStringFromCGPoint(previousLocation),NSStringFromCGPoint(currentLocation),[ToolClass getCurretDate]];
    
    NSInvocationOperation *operation = [[NSInvocationOperation alloc]initWithTarget:self selector:@selector(doWork:) object:strBody];
    [queue addOperation:operation];
    [operation release];
     */

}

- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event
{
    // make sure a point is recorded
    //[self touchesMoved:touches withEvent:event];
    
    // update the image
    [self updateCacheImage:NO];
    
    // clear the current tool
    self.currentTool = nil;
    
    // clear the redo queue
    [self.bufferArray removeAllObjects];
    
    // call the delegate
    if ([self.delegate respondsToSelector:@selector(drawingView:didEndDrawUsingTool:)]) {
        [self.delegate drawingView:self didEndDrawUsingTool:self.currentTool];
    }
    /*
    NSString *strBody=[NSString stringWithFormat:@"{\"type\":\"3\",\"content\":{\"point1\":\"%@\",\"point2\":\"%@\",\"point3\":\"%@\"}}",NSStringFromCGPoint(CGPointZero),NSStringFromCGPoint(CGPointZero),[ToolClass getCurretDate]];
    
    NSInvocationOperation *operation = [[NSInvocationOperation alloc]initWithTarget:self selector:@selector(doWork:) object:strBody];
    [queue addOperation:operation];
    [operation release];
     */
}

- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event
{
    // make sure a point is recorded
    //[self touchesEnded:touches withEvent:event];
}



- (void)dealloc
{
    
    [[NSNotificationCenter defaultCenter]removeObserver:self name:@"touchScreen" object:nil];
    [[NSNotificationCenter defaultCenter]removeObserver:self name:@"moveScreen" object:nil];
    [[NSNotificationCenter defaultCenter]removeObserver:self name:@"endScreen" object:nil];
    
    self.pathArray = nil;
    self.bufferArray = nil;
    self.currentTool = nil;
    self.image = nil;
    [super dealloc];
}

@end
