//
//  DrawPenView.m
//  BigClassRoom
//
//  Created by apple  on 13-5-6.
//
//

#import "DrawPenView.h"

@implementation DrawPenView
@synthesize image;
- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        // Initialization code
        
        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(touchScreen:) name:@"touchScreen" object:nil];
        
        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(moveScreen:) name:@"moveScreen" object:nil];
        
        [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(endScreen:) name:@"endScreen" object:nil];
        

        pathArray=[[NSMutableArray alloc]init];
        self.backgroundColor = [UIColor clearColor];

    }
    return self;
}
-(void)touchScreen:(NSNotification*)aNote{


    NSMutableDictionary *muDict=[[aNote object] mutableCopy];
    
    CGPoint previousPoint1=CGPointFromString([muDict objectForKey:@"point1"]);
    
    penTool=[[DrawPenTool alloc]init];
    penTool.lineAlpha=kDefaultLineAlpha;
    penTool.lineColor=kDefaultLineColor;
    penTool.lineWidth=kDefaultLineWidth;
    [pathArray addObject:penTool];
    [penTool release];
    [penTool setInitialPoint:previousPoint1];

}


-(void)moveScreen:(NSNotification*)aNote{

    NSMutableDictionary *muDict=[[aNote object] mutableCopy];
    
    CGPoint previousPoint1=CGPointFromString([muDict objectForKey:@"point1"]);
    CGPoint previousPoint2=CGPointFromString([muDict objectForKey:@"point2"]);
    
    [penTool moveFromPoint:previousPoint1 toPoint:previousPoint2];
    
#if PARTIAL_REDRAW
    // calculate the dirty rect
    CGFloat minX = fmin(previousLocation.x, currentLocation.x) - self.lineWidth * 0.5;
    CGFloat minY = fmin(previousLocation.y, currentLocation.y) - self.lineWidth * 0.5;
    CGFloat maxX = fmax(previousLocation.x, currentLocation.x) + self.lineWidth * 0.5;
    CGFloat maxY = fmax(previousLocation.y, currentLocation.y) + self.lineWidth * 0.5;
    [self setNeedsDisplayInRect:CGRectMake(minX, minY, (maxX - minX), (maxY - minY))];
#else
    [self setNeedsDisplay];
#endif
    

}

-(void)endScreen:(NSNotification*)aNote{

     [self updateCacheImage:NO];
}


-(void)dealloc{
    
    [[NSNotificationCenter defaultCenter]removeObserver:self name:@"touchScreen" object:nil];
    [[NSNotificationCenter defaultCenter]removeObserver:self name:@"moveScreen" object:nil];
    [[NSNotificationCenter defaultCenter]removeObserver:self name:@"endScreen" object:nil];
    self.image = nil;
    [pathArray release];

    [super dealloc];
}

// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect
{
    // Drawing code
   
   [self.image drawInRect:self.bounds];
    [penTool draw];
   
}
- (void)updateCacheImage:(BOOL)redraw
{
    // init a context
    UIGraphicsBeginImageContextWithOptions(self.bounds.size, NO, 0.0);
    
    if (redraw) {
        // erase the previous image
        self.image = nil;
        // I need to redraw all the lines
        for (DrawPenTool *pen_tool in pathArray) {
            [pen_tool draw];
        }
       
    } else {
        // set the draw point
        [self.image drawAtPoint:CGPointZero];
        [penTool draw];
    }
    
    // store the image
    self.image = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
}
- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
    // init the bezier path
    
    penTool=[[DrawPenTool alloc]init];
    penTool.lineAlpha=kDefaultLineAlpha;
    penTool.lineColor=kDefaultLineColor;
    penTool.lineWidth=kDefaultLineWidth;
    [pathArray addObject:penTool];
    [penTool release];
    
    // add the first touch
    UITouch *touch = [touches anyObject];
    [penTool setInitialPoint:[touch locationInView:self]];
    
       //老师不再给学生发送画笔点的请求
    /*
     NSString *strBody=[NSString stringWithFormat:@"{\"type\":\"1\",\"content\":{\"point1\":\"%@\",\"point2\":\"%@\",\"point3\":\"%@\"}}",NSStringFromCGPoint([touch locationInView:self]),NSStringFromCGPoint(CGPointZero),[ToolClass getCurretDate]];
     
     NSInvocationOperation *operation = [[NSInvocationOperation alloc]initWithTarget:self selector:@selector(doWork:) object:strBody];
     [queue addOperation:operation];
     [operation release];
     */
    
}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
    // save all the touches in the path
    UITouch *touch = [touches anyObject];
    
    // add the current point to the path
    CGPoint currentLocation = [touch locationInView:self];
    CGPoint previousLocation = [touch previousLocationInView:self];
    [penTool moveFromPoint:previousLocation toPoint:currentLocation];
    
#if PARTIAL_REDRAW
    // calculate the dirty rect
    CGFloat minX = fmin(previousLocation.x, currentLocation.x) - self.lineWidth * 0.5;
    CGFloat minY = fmin(previousLocation.y, currentLocation.y) - self.lineWidth * 0.5;
    CGFloat maxX = fmax(previousLocation.x, currentLocation.x) + self.lineWidth * 0.5;
    CGFloat maxY = fmax(previousLocation.y, currentLocation.y) + self.lineWidth * 0.5;
    [self setNeedsDisplayInRect:CGRectMake(minX, minY, (maxX - minX), (maxY - minY))];
#else
    [self setNeedsDisplay];
#endif
    
    /*
     NSString *strBody=[NSString stringWithFormat:@"{\"type\":\"2\",\"content\":{\"point1\":\"%@\",\"point2\":\"%@\",\"point3\":\"%@\"}}",NSStringFromCGPoint(previousLocation),NSStringFromCGPoint(currentLocation),[ToolClass getCurretDate]];
     
     NSInvocationOperation *operation = [[NSInvocationOperation alloc]initWithTarget:self selector:@selector(doWork:) object:strBody];
     [queue addOperation:operation];
     [operation release];
     */
    
}

- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event
{
    // make sure a point is recorded
    //[self touchesMoved:touches withEvent:event];
    
    // update the image
    [self updateCacheImage:NO];
    
    // clear the current tool
       /*
     NSString *strBody=[NSString stringWithFormat:@"{\"type\":\"3\",\"content\":{\"point1\":\"%@\",\"point2\":\"%@\",\"point3\":\"%@\"}}",NSStringFromCGPoint(CGPointZero),NSStringFromCGPoint(CGPointZero),[ToolClass getCurretDate]];
     
     NSInvocationOperation *operation = [[NSInvocationOperation alloc]initWithTarget:self selector:@selector(doWork:) object:strBody];
     [queue addOperation:operation];
     [operation release];
     */
}

- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event
{
    // make sure a point is recorded
    //[self touchesEnded:touches withEvent:event];
}



@end
